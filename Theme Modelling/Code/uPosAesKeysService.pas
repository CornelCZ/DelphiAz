unit uPosAesKeysService;

interface

uses
  SysUtils, Classes, adodb, Rio, InvokeRegistry, SOAPHTTPClient, useful;

type
  TPosAesKeysService = class(TDataModule)
    SoapClient: THTTPRIO;
    procedure SoapClientBeforeExecute(const MethodName: String;
      var SOAPRequest: WideString);
  public
    procedure Initialise(Conn: TADOConnection; Log: TLogFunction);
    procedure SendAesKeyToPos(const TerminalId: Integer);
  private
    _log: TLogFunction;
    function AddSoapNamespaceToArgument(SOAPRequest: string): string;
  end;

  //This is a SOAP interface for the PosAesKeysService which is hosted by the Aztec BoH Service
  IPosAesKeysService = interface(IInvokable)
  ['{0165D2BB-C988-9C6B-17B4-E4328A288281}']
    procedure EncryptAndSendKeysTo1Till(const TerminalId: Integer); stdcall;
  end;

implementation

{$R *.dfm}

const SOAP_Namespace = 'encryption';

procedure TPosAesKeysService.Initialise(Conn: TADOConnection; Log: TLogFunction);
const PosAesKeysServiceId = 14;
var
 IpAddress: string;
 IpPort: integer;
 Protocol: string;
 SoapServiceName: string;
begin
  _log := Log;

  with TADOQuery.Create(nil) do
  try
    Connection := Conn;
    SQL.Text := Format(
      'SELECT COALESCE(NULLIF(o.IPAddress, ''''), NULLIF(s.IPAddress, ''''), ''127.0.0.1'') AS IpAddress,'+
      '  COALESCE(o.IPPortNumber, s.IPPortNumber) AS IpPort,'+
      '  COALESCE(NULLIF(o.Protocol, ''''), s.Protocol) AS Protocol,'+
      '  s.SOAPServiceName '+
      'FROM SiteServiceSettings s LEFT JOIN SiteServiceSettingsOverrides o'+
      '  ON s.Id = o.ServiceId AND o.SiteCode = dbo.fnGetSiteCode() '+
      'WHERE s.Id = %d', [PosAesKeysServiceId]);
    Open;
    if not(EOF) then
    begin
       IpAddress := FieldByName('IpAddress').Value;
       IpPort := FieldByName('IpPort').Value;
       Protocol := FieldByName('Protocol').Value;
       SoapServiceName := FieldByName('SOAPServiceName').Value;
    end
    else
    begin
       IpAddress := '127.0.0.1';
       IpPort := 50000;
       Protocol := 'http';
       SoapServiceName := 'PosAesKeysService';
    end;
  finally
    Free;
  end;

  SoapClient.URL := FORMAT('%s://%s:%d/%s', [Protocol, IpAddress, IpPort, SoapServiceName]);
end;

procedure TPosAesKeysService.SendAesKeyToPos(const TerminalId: Integer);
begin
  if SoapClient.URL = '' then
    raise Exception.Create('TPosAesKeysService has not been initialised');

  (SoapClient as IPosAesKeysService).EncryptAndSendKeysTo1Till(TerminalId);
end;

procedure TPosAesKeysService.SoapClientBeforeExecute(
  const MethodName: String; var SOAPRequest: WideString);
begin
  SOAPRequest := AddSOAPNamespaceToArgument(SOAPRequest);
  _log(Format('Calling service %s with SOAP body: %s', [SoapClient.URL, SOAPRequest]));
end;

// This is a bit of hack to get round the fact that:
// (a) It seems impossible to configure the Delphi SOAP components so they do not use a SOAP namespace in the SOAP message.
//     If the namespace argument of InvRegistry.RegisterInterface is set to empty string the SoapClient component defaults to
//     using its parent classname as the namespace. Hence the use of 'encryption' as the namespace here and in the Aztec BoHService.
// (b) The SOAP message generated by Delphi does not prefix any of the arguments with the SOAP namespace, only the action name.
//     BUT the SOAP handling of the BoHService expects this and thus the arguments end up with their default values in the BoHService
//     method invoked by the SOAP framework i.e. terminalId is set to zero.
function TPosAesKeysService.AddSoapNamespaceToArgument(SOAPRequest: string): string;
var expectedNamespace: string;
begin
  expectedNamespace := Format('xmlns:NS1="%s"', [SOAP_Namespace]);
  Assert(Pos(expectedNamespace, SOAPRequest) <> 0, Format('Expected to find SOAP namespace %s', [SOAP_Namespace]));

  result :=  StringReplace(SOAPRequest, 'TerminalId', 'NS1:terminalId', [rfReplaceAll, rfIgnoreCase]);
end;

initialization
  InvRegistry.RegisterInterface(TypeInfo(IPosAesKeysService), SOAP_Namespace, '', '');
  InvRegistry.RegisterDefaultSOAPAction(TypeInfo(IPosAesKeysService), '%operationName%');

end.
